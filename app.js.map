{"version":3,"file":"app.js","sources":["webpack:///./src/reducer/reducer.js"],"sourcesContent":["// Action Constants\nconst LOAD_SAUCES = 'LOAD_SAUCES';\nconst DELETE_SAUCE = 'DELETE_SAUCE';\nconst UPDATE_SAUCE = 'UPDATE_SAUCE';\nconst SAUCE_DETAILS = 'SAUCE_DETAILS';\nconst ADD_SAUCE = 'ADD_SAUCE';\nconst SUCCESS_ON = 'SUCCESS_ON';\nconst SUCCESS_OFF = 'SUCCESS_OFF';\nconst INIT_LOAD = 'INIT_LOAD';\n\n// Action Creators\nexport const loadSauces = payload => {\n  return dispatch => {\n    return dispatch({ type: LOAD_SAUCES, payload });\n  };\n};\nexport const initLoad = () => {\n  return dispatch => {\n    return dispatch({ type: INIT_LOAD });\n  };\n};\n\nexport const deleteSauce = payload => {\n  return dispatch => {\n    return dispatch({ type: DELETE_SAUCE, payload });\n  };\n};\n\nexport const sauceDetails = payload => {\n  return dispatch => {\n    return dispatch({ type: SAUCE_DETAILS, payload });\n  };\n};\n\nexport const addSauce = payload => {\n  return dispatch => {\n    return dispatch({ type: ADD_SAUCE, payload });\n  };\n};\n\nexport const updateSauce = payload => {\n  return dispatch => {\n    return dispatch({ type: UPDATE_SAUCE, payload });\n  };\n};\n\nexport const successOn = () => {\n  return dispatch => {\n    setTimeout(() => {\n      return dispatch({ type: SUCCESS_OFF });\n    }, 6000);\n    return dispatch({ type: SUCCESS_ON });\n  };\n};\n\n// Initial State\nlet initialState = {\n  list: [],\n  selected: {},\n  success: false,\n  initLoad: true\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case 'LOAD_SAUCES':\n      return { ...state, ...(state.list = [...payload]) };\n\n    case 'INIT_LOAD':\n      return { ...state, ...(state.initLoad = false) };\n\n    case 'UPDATE_SAUCE':\n      let oldState = state.list;\n      oldState.forEach(ele => {\n        if (ele.id == payload.target) {\n          ele.imageURL = payload.image;\n        }\n      });\n      return { ...state, ...(state.list = oldState) };\n\n    case 'DELETE_SAUCE':\n      let newList = state.list;\n      newList.forEach((ele, i) => {\n        if (ele.id == payload) {\n          newList.splice(i, 1);\n        }\n      });\n      return { ...state, ...(state.list = [...newList]) };\n\n    case 'SAUCE_DETAILS':\n      let selectedSauce = {};\n      state.list.forEach((ele, i) => {\n        if (ele.id == payload) {\n          selectedSauce = { ...state.list[i] };\n        }\n      });\n      return { ...state, ...(state.selected = selectedSauce) };\n\n    case 'ADD_SAUCE':\n      let addedList = state.list;\n      addedList.push(payload);\n      return { ...state, ...(state.list = [...addedList]) };\n\n    case 'SUCCESS_ON':\n      return { ...state, ...(state.success = true) };\n\n    case 'SUCCESS_OFF':\n      return { ...state, ...(state.success = false) };\n\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAwDA","sourceRoot":""}